# coding: utf-8

"""
    Streams Api

    API that provides access to Moralis Streams  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Transaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tag': 'str',
        'stream_id': 'str',
        'hash': 'str',
        'gas': 'str',
        'gas_price': 'str',
        'nonce': 'str',
        'input': 'str',
        'transaction_index': 'str',
        'from_address': 'str',
        'to_address': 'str',
        'value': 'str',
        'type': 'str',
        'v': 'str',
        'r': 'str',
        's': 'str',
        'receipt_cumulative_gas_used': 'str',
        'receipt_gas_used': 'str',
        'receipt_contract_address': 'str',
        'receipt_root': 'str',
        'receipt_status': 'str'
    }

    attribute_map = {
        'tag': 'tag',
        'stream_id': 'streamId',
        'hash': 'hash',
        'gas': 'gas',
        'gas_price': 'gasPrice',
        'nonce': 'nonce',
        'input': 'input',
        'transaction_index': 'transactionIndex',
        'from_address': 'fromAddress',
        'to_address': 'toAddress',
        'value': 'value',
        'type': 'type',
        'v': 'v',
        'r': 'r',
        's': 's',
        'receipt_cumulative_gas_used': 'receiptCumulativeGasUsed',
        'receipt_gas_used': 'receiptGasUsed',
        'receipt_contract_address': 'receiptContractAddress',
        'receipt_root': 'receiptRoot',
        'receipt_status': 'receiptStatus'
    }

    def __init__(self, tag=None, stream_id=None, hash=None, gas=None, gas_price=None, nonce=None, input=None, transaction_index=None, from_address=None, to_address=None, value=None, type=None, v=None, r=None, s=None, receipt_cumulative_gas_used=None, receipt_gas_used=None, receipt_contract_address=None, receipt_root=None, receipt_status=None):  # noqa: E501
        """Transaction - a model defined in Swagger"""  # noqa: E501
        self._tag = None
        self._stream_id = None
        self._hash = None
        self._gas = None
        self._gas_price = None
        self._nonce = None
        self._input = None
        self._transaction_index = None
        self._from_address = None
        self._to_address = None
        self._value = None
        self._type = None
        self._v = None
        self._r = None
        self._s = None
        self._receipt_cumulative_gas_used = None
        self._receipt_gas_used = None
        self._receipt_contract_address = None
        self._receipt_root = None
        self._receipt_status = None
        self.discriminator = None
        self.tag = tag
        self.stream_id = stream_id
        self.hash = hash
        self.gas = gas
        self.gas_price = gas_price
        self.nonce = nonce
        self.input = input
        self.transaction_index = transaction_index
        self.from_address = from_address
        self.to_address = to_address
        self.value = value
        self.type = type
        self.v = v
        self.r = r
        self.s = s
        self.receipt_cumulative_gas_used = receipt_cumulative_gas_used
        self.receipt_gas_used = receipt_gas_used
        self.receipt_contract_address = receipt_contract_address
        self.receipt_root = receipt_root
        self.receipt_status = receipt_status

    @property
    def tag(self):
        """Gets the tag of this Transaction.  # noqa: E501


        :return: The tag of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Transaction.


        :param tag: The tag of this Transaction.  # noqa: E501
        :type: str
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")  # noqa: E501

        self._tag = tag

    @property
    def stream_id(self):
        """Gets the stream_id of this Transaction.  # noqa: E501


        :return: The stream_id of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this Transaction.


        :param stream_id: The stream_id of this Transaction.  # noqa: E501
        :type: str
        """
        if stream_id is None:
            raise ValueError("Invalid value for `stream_id`, must not be `None`")  # noqa: E501

        self._stream_id = stream_id

    @property
    def hash(self):
        """Gets the hash of this Transaction.  # noqa: E501


        :return: The hash of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Transaction.


        :param hash: The hash of this Transaction.  # noqa: E501
        :type: str
        """
        if hash is None:
            raise ValueError("Invalid value for `hash`, must not be `None`")  # noqa: E501

        self._hash = hash

    @property
    def gas(self):
        """Gets the gas of this Transaction.  # noqa: E501


        :return: The gas of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._gas

    @gas.setter
    def gas(self, gas):
        """Sets the gas of this Transaction.


        :param gas: The gas of this Transaction.  # noqa: E501
        :type: str
        """
        if gas is None:
            raise ValueError("Invalid value for `gas`, must not be `None`")  # noqa: E501

        self._gas = gas

    @property
    def gas_price(self):
        """Gets the gas_price of this Transaction.  # noqa: E501


        :return: The gas_price of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._gas_price

    @gas_price.setter
    def gas_price(self, gas_price):
        """Sets the gas_price of this Transaction.


        :param gas_price: The gas_price of this Transaction.  # noqa: E501
        :type: str
        """
        if gas_price is None:
            raise ValueError("Invalid value for `gas_price`, must not be `None`")  # noqa: E501

        self._gas_price = gas_price

    @property
    def nonce(self):
        """Gets the nonce of this Transaction.  # noqa: E501


        :return: The nonce of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this Transaction.


        :param nonce: The nonce of this Transaction.  # noqa: E501
        :type: str
        """
        if nonce is None:
            raise ValueError("Invalid value for `nonce`, must not be `None`")  # noqa: E501

        self._nonce = nonce

    @property
    def input(self):
        """Gets the input of this Transaction.  # noqa: E501


        :return: The input of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this Transaction.


        :param input: The input of this Transaction.  # noqa: E501
        :type: str
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")  # noqa: E501

        self._input = input

    @property
    def transaction_index(self):
        """Gets the transaction_index of this Transaction.  # noqa: E501


        :return: The transaction_index of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._transaction_index

    @transaction_index.setter
    def transaction_index(self, transaction_index):
        """Sets the transaction_index of this Transaction.


        :param transaction_index: The transaction_index of this Transaction.  # noqa: E501
        :type: str
        """
        if transaction_index is None:
            raise ValueError("Invalid value for `transaction_index`, must not be `None`")  # noqa: E501

        self._transaction_index = transaction_index

    @property
    def from_address(self):
        """Gets the from_address of this Transaction.  # noqa: E501


        :return: The from_address of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._from_address

    @from_address.setter
    def from_address(self, from_address):
        """Sets the from_address of this Transaction.


        :param from_address: The from_address of this Transaction.  # noqa: E501
        :type: str
        """
        if from_address is None:
            raise ValueError("Invalid value for `from_address`, must not be `None`")  # noqa: E501

        self._from_address = from_address

    @property
    def to_address(self):
        """Gets the to_address of this Transaction.  # noqa: E501


        :return: The to_address of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._to_address

    @to_address.setter
    def to_address(self, to_address):
        """Sets the to_address of this Transaction.


        :param to_address: The to_address of this Transaction.  # noqa: E501
        :type: str
        """
        if to_address is None:
            raise ValueError("Invalid value for `to_address`, must not be `None`")  # noqa: E501

        self._to_address = to_address

    @property
    def value(self):
        """Gets the value of this Transaction.  # noqa: E501


        :return: The value of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Transaction.


        :param value: The value of this Transaction.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def type(self):
        """Gets the type of this Transaction.  # noqa: E501


        :return: The type of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Transaction.


        :param type: The type of this Transaction.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def v(self):
        """Gets the v of this Transaction.  # noqa: E501


        :return: The v of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._v

    @v.setter
    def v(self, v):
        """Sets the v of this Transaction.


        :param v: The v of this Transaction.  # noqa: E501
        :type: str
        """
        if v is None:
            raise ValueError("Invalid value for `v`, must not be `None`")  # noqa: E501

        self._v = v

    @property
    def r(self):
        """Gets the r of this Transaction.  # noqa: E501


        :return: The r of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._r

    @r.setter
    def r(self, r):
        """Sets the r of this Transaction.


        :param r: The r of this Transaction.  # noqa: E501
        :type: str
        """
        if r is None:
            raise ValueError("Invalid value for `r`, must not be `None`")  # noqa: E501

        self._r = r

    @property
    def s(self):
        """Gets the s of this Transaction.  # noqa: E501


        :return: The s of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._s

    @s.setter
    def s(self, s):
        """Sets the s of this Transaction.


        :param s: The s of this Transaction.  # noqa: E501
        :type: str
        """
        if s is None:
            raise ValueError("Invalid value for `s`, must not be `None`")  # noqa: E501

        self._s = s

    @property
    def receipt_cumulative_gas_used(self):
        """Gets the receipt_cumulative_gas_used of this Transaction.  # noqa: E501


        :return: The receipt_cumulative_gas_used of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._receipt_cumulative_gas_used

    @receipt_cumulative_gas_used.setter
    def receipt_cumulative_gas_used(self, receipt_cumulative_gas_used):
        """Sets the receipt_cumulative_gas_used of this Transaction.


        :param receipt_cumulative_gas_used: The receipt_cumulative_gas_used of this Transaction.  # noqa: E501
        :type: str
        """
        if receipt_cumulative_gas_used is None:
            raise ValueError("Invalid value for `receipt_cumulative_gas_used`, must not be `None`")  # noqa: E501

        self._receipt_cumulative_gas_used = receipt_cumulative_gas_used

    @property
    def receipt_gas_used(self):
        """Gets the receipt_gas_used of this Transaction.  # noqa: E501


        :return: The receipt_gas_used of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._receipt_gas_used

    @receipt_gas_used.setter
    def receipt_gas_used(self, receipt_gas_used):
        """Sets the receipt_gas_used of this Transaction.


        :param receipt_gas_used: The receipt_gas_used of this Transaction.  # noqa: E501
        :type: str
        """
        if receipt_gas_used is None:
            raise ValueError("Invalid value for `receipt_gas_used`, must not be `None`")  # noqa: E501

        self._receipt_gas_used = receipt_gas_used

    @property
    def receipt_contract_address(self):
        """Gets the receipt_contract_address of this Transaction.  # noqa: E501


        :return: The receipt_contract_address of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._receipt_contract_address

    @receipt_contract_address.setter
    def receipt_contract_address(self, receipt_contract_address):
        """Sets the receipt_contract_address of this Transaction.


        :param receipt_contract_address: The receipt_contract_address of this Transaction.  # noqa: E501
        :type: str
        """
        if receipt_contract_address is None:
            raise ValueError("Invalid value for `receipt_contract_address`, must not be `None`")  # noqa: E501

        self._receipt_contract_address = receipt_contract_address

    @property
    def receipt_root(self):
        """Gets the receipt_root of this Transaction.  # noqa: E501


        :return: The receipt_root of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._receipt_root

    @receipt_root.setter
    def receipt_root(self, receipt_root):
        """Sets the receipt_root of this Transaction.


        :param receipt_root: The receipt_root of this Transaction.  # noqa: E501
        :type: str
        """
        if receipt_root is None:
            raise ValueError("Invalid value for `receipt_root`, must not be `None`")  # noqa: E501

        self._receipt_root = receipt_root

    @property
    def receipt_status(self):
        """Gets the receipt_status of this Transaction.  # noqa: E501


        :return: The receipt_status of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._receipt_status

    @receipt_status.setter
    def receipt_status(self, receipt_status):
        """Sets the receipt_status of this Transaction.


        :param receipt_status: The receipt_status of this Transaction.  # noqa: E501
        :type: str
        """
        if receipt_status is None:
            raise ValueError("Invalid value for `receipt_status`, must not be `None`")  # noqa: E501

        self._receipt_status = receipt_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Transaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
