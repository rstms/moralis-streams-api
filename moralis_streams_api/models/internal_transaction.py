# coding: utf-8

"""
    Streams Api

    API that provides access to Moralis Streams  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InternalTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'str',
        'to': 'str',
        'value': 'str',
        'transaction_hash': 'str',
        'gas': 'str',
        'stream_id': 'str',
        'tag': 'str',
        'stream_type': 'str'
    }

    attribute_map = {
        '_from': 'from',
        'to': 'to',
        'value': 'value',
        'transaction_hash': 'transactionHash',
        'gas': 'gas',
        'stream_id': 'streamId',
        'tag': 'tag',
        'stream_type': 'streamType'
    }

    def __init__(self, _from=None, to=None, value=None, transaction_hash=None, gas=None, stream_id=None, tag=None, stream_type=None):  # noqa: E501
        """InternalTransaction - a model defined in Swagger"""  # noqa: E501
        self.__from = None
        self._to = None
        self._value = None
        self._transaction_hash = None
        self._gas = None
        self._stream_id = None
        self._tag = None
        self._stream_type = None
        self.discriminator = None
        self._from = _from
        self.to = to
        self.value = value
        self.transaction_hash = transaction_hash
        self.gas = gas
        self.stream_id = stream_id
        self.tag = tag
        self.stream_type = stream_type

    @property
    def _from(self):
        """Gets the _from of this InternalTransaction.  # noqa: E501


        :return: The _from of this InternalTransaction.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this InternalTransaction.


        :param _from: The _from of this InternalTransaction.  # noqa: E501
        :type: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this InternalTransaction.  # noqa: E501


        :return: The to of this InternalTransaction.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this InternalTransaction.


        :param to: The to of this InternalTransaction.  # noqa: E501
        :type: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def value(self):
        """Gets the value of this InternalTransaction.  # noqa: E501


        :return: The value of this InternalTransaction.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InternalTransaction.


        :param value: The value of this InternalTransaction.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def transaction_hash(self):
        """Gets the transaction_hash of this InternalTransaction.  # noqa: E501


        :return: The transaction_hash of this InternalTransaction.  # noqa: E501
        :rtype: str
        """
        return self._transaction_hash

    @transaction_hash.setter
    def transaction_hash(self, transaction_hash):
        """Sets the transaction_hash of this InternalTransaction.


        :param transaction_hash: The transaction_hash of this InternalTransaction.  # noqa: E501
        :type: str
        """
        if transaction_hash is None:
            raise ValueError("Invalid value for `transaction_hash`, must not be `None`")  # noqa: E501

        self._transaction_hash = transaction_hash

    @property
    def gas(self):
        """Gets the gas of this InternalTransaction.  # noqa: E501


        :return: The gas of this InternalTransaction.  # noqa: E501
        :rtype: str
        """
        return self._gas

    @gas.setter
    def gas(self, gas):
        """Sets the gas of this InternalTransaction.


        :param gas: The gas of this InternalTransaction.  # noqa: E501
        :type: str
        """
        if gas is None:
            raise ValueError("Invalid value for `gas`, must not be `None`")  # noqa: E501

        self._gas = gas

    @property
    def stream_id(self):
        """Gets the stream_id of this InternalTransaction.  # noqa: E501


        :return: The stream_id of this InternalTransaction.  # noqa: E501
        :rtype: str
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this InternalTransaction.


        :param stream_id: The stream_id of this InternalTransaction.  # noqa: E501
        :type: str
        """
        if stream_id is None:
            raise ValueError("Invalid value for `stream_id`, must not be `None`")  # noqa: E501

        self._stream_id = stream_id

    @property
    def tag(self):
        """Gets the tag of this InternalTransaction.  # noqa: E501


        :return: The tag of this InternalTransaction.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this InternalTransaction.


        :param tag: The tag of this InternalTransaction.  # noqa: E501
        :type: str
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")  # noqa: E501

        self._tag = tag

    @property
    def stream_type(self):
        """Gets the stream_type of this InternalTransaction.  # noqa: E501


        :return: The stream_type of this InternalTransaction.  # noqa: E501
        :rtype: str
        """
        return self._stream_type

    @stream_type.setter
    def stream_type(self, stream_type):
        """Sets the stream_type of this InternalTransaction.


        :param stream_type: The stream_type of this InternalTransaction.  # noqa: E501
        :type: str
        """
        if stream_type is None:
            raise ValueError("Invalid value for `stream_type`, must not be `None`")  # noqa: E501

        self._stream_type = stream_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InternalTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InternalTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
