# coding: utf-8

"""
    Streams Api

    API that provides access to Moralis Streams  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AbiItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'anonymous': 'bool',
        'constant': 'bool',
        'inputs': 'list[AbiInput]',
        'name': 'str',
        'outputs': 'list[AbiOutput]',
        'payable': 'bool',
        'state_mutability': 'StateMutabilityType',
        'type': 'AbiType',
        'gas': 'float'
    }

    attribute_map = {
        'anonymous': 'anonymous',
        'constant': 'constant',
        'inputs': 'inputs',
        'name': 'name',
        'outputs': 'outputs',
        'payable': 'payable',
        'state_mutability': 'stateMutability',
        'type': 'type',
        'gas': 'gas'
    }

    def __init__(self, anonymous=None, constant=None, inputs=None, name=None, outputs=None, payable=None, state_mutability=None, type=None, gas=None):  # noqa: E501
        """AbiItem - a model defined in Swagger"""  # noqa: E501
        self._anonymous = None
        self._constant = None
        self._inputs = None
        self._name = None
        self._outputs = None
        self._payable = None
        self._state_mutability = None
        self._type = None
        self._gas = None
        self.discriminator = None
        if anonymous is not None:
            self.anonymous = anonymous
        if constant is not None:
            self.constant = constant
        if inputs is not None:
            self.inputs = inputs
        if name is not None:
            self.name = name
        if outputs is not None:
            self.outputs = outputs
        if payable is not None:
            self.payable = payable
        if state_mutability is not None:
            self.state_mutability = state_mutability
        self.type = type
        if gas is not None:
            self.gas = gas

    @property
    def anonymous(self):
        """Gets the anonymous of this AbiItem.  # noqa: E501


        :return: The anonymous of this AbiItem.  # noqa: E501
        :rtype: bool
        """
        return self._anonymous

    @anonymous.setter
    def anonymous(self, anonymous):
        """Sets the anonymous of this AbiItem.


        :param anonymous: The anonymous of this AbiItem.  # noqa: E501
        :type: bool
        """

        self._anonymous = anonymous

    @property
    def constant(self):
        """Gets the constant of this AbiItem.  # noqa: E501


        :return: The constant of this AbiItem.  # noqa: E501
        :rtype: bool
        """
        return self._constant

    @constant.setter
    def constant(self, constant):
        """Sets the constant of this AbiItem.


        :param constant: The constant of this AbiItem.  # noqa: E501
        :type: bool
        """

        self._constant = constant

    @property
    def inputs(self):
        """Gets the inputs of this AbiItem.  # noqa: E501


        :return: The inputs of this AbiItem.  # noqa: E501
        :rtype: list[AbiInput]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this AbiItem.


        :param inputs: The inputs of this AbiItem.  # noqa: E501
        :type: list[AbiInput]
        """

        self._inputs = inputs

    @property
    def name(self):
        """Gets the name of this AbiItem.  # noqa: E501


        :return: The name of this AbiItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AbiItem.


        :param name: The name of this AbiItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def outputs(self):
        """Gets the outputs of this AbiItem.  # noqa: E501


        :return: The outputs of this AbiItem.  # noqa: E501
        :rtype: list[AbiOutput]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this AbiItem.


        :param outputs: The outputs of this AbiItem.  # noqa: E501
        :type: list[AbiOutput]
        """

        self._outputs = outputs

    @property
    def payable(self):
        """Gets the payable of this AbiItem.  # noqa: E501


        :return: The payable of this AbiItem.  # noqa: E501
        :rtype: bool
        """
        return self._payable

    @payable.setter
    def payable(self, payable):
        """Sets the payable of this AbiItem.


        :param payable: The payable of this AbiItem.  # noqa: E501
        :type: bool
        """

        self._payable = payable

    @property
    def state_mutability(self):
        """Gets the state_mutability of this AbiItem.  # noqa: E501


        :return: The state_mutability of this AbiItem.  # noqa: E501
        :rtype: StateMutabilityType
        """
        return self._state_mutability

    @state_mutability.setter
    def state_mutability(self, state_mutability):
        """Sets the state_mutability of this AbiItem.


        :param state_mutability: The state_mutability of this AbiItem.  # noqa: E501
        :type: StateMutabilityType
        """

        self._state_mutability = state_mutability

    @property
    def type(self):
        """Gets the type of this AbiItem.  # noqa: E501


        :return: The type of this AbiItem.  # noqa: E501
        :rtype: AbiType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AbiItem.


        :param type: The type of this AbiItem.  # noqa: E501
        :type: AbiType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def gas(self):
        """Gets the gas of this AbiItem.  # noqa: E501


        :return: The gas of this AbiItem.  # noqa: E501
        :rtype: float
        """
        return self._gas

    @gas.setter
    def gas(self, gas):
        """Sets the gas of this AbiItem.


        :param gas: The gas of this AbiItem.  # noqa: E501
        :type: float
        """

        self._gas = gas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AbiItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbiItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
