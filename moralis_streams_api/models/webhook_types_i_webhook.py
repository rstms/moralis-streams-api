# coding: utf-8

"""
    Streams Api

    API that provides access to Moralis Streams  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebhookTypesIWebhook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'erc20_transfers': 'list[IERC20Transfer]',
        'erc20_approvals': 'list[IERC20Approval]',
        'nft_transfers': 'list[INFTTransfer]',
        'nft_approvals': 'INFTApproval',
        'block': 'Block',
        'chain_id': 'str',
        'logs': 'list[Log]',
        'txs': 'list[Transaction]',
        'txs_internal': 'list[InternalTransaction]',
        'abis': 'IAbi',
        'retries': 'float',
        'confirmed': 'bool'
    }

    attribute_map = {
        'erc20_transfers': 'erc20Transfers',
        'erc20_approvals': 'erc20Approvals',
        'nft_transfers': 'nftTransfers',
        'nft_approvals': 'nftApprovals',
        'block': 'block',
        'chain_id': 'chainId',
        'logs': 'logs',
        'txs': 'txs',
        'txs_internal': 'txsInternal',
        'abis': 'abis',
        'retries': 'retries',
        'confirmed': 'confirmed'
    }

    def __init__(self, erc20_transfers=None, erc20_approvals=None, nft_transfers=None, nft_approvals=None, block=None, chain_id=None, logs=None, txs=None, txs_internal=None, abis=None, retries=None, confirmed=None):  # noqa: E501
        """WebhookTypesIWebhook - a model defined in Swagger"""  # noqa: E501
        self._erc20_transfers = None
        self._erc20_approvals = None
        self._nft_transfers = None
        self._nft_approvals = None
        self._block = None
        self._chain_id = None
        self._logs = None
        self._txs = None
        self._txs_internal = None
        self._abis = None
        self._retries = None
        self._confirmed = None
        self.discriminator = None
        self.erc20_transfers = erc20_transfers
        self.erc20_approvals = erc20_approvals
        self.nft_transfers = nft_transfers
        self.nft_approvals = nft_approvals
        self.block = block
        self.chain_id = chain_id
        self.logs = logs
        self.txs = txs
        self.txs_internal = txs_internal
        self.abis = abis
        self.retries = retries
        self.confirmed = confirmed

    @property
    def erc20_transfers(self):
        """Gets the erc20_transfers of this WebhookTypesIWebhook.  # noqa: E501


        :return: The erc20_transfers of this WebhookTypesIWebhook.  # noqa: E501
        :rtype: list[IERC20Transfer]
        """
        return self._erc20_transfers

    @erc20_transfers.setter
    def erc20_transfers(self, erc20_transfers):
        """Sets the erc20_transfers of this WebhookTypesIWebhook.


        :param erc20_transfers: The erc20_transfers of this WebhookTypesIWebhook.  # noqa: E501
        :type: list[IERC20Transfer]
        """
        if erc20_transfers is None:
            raise ValueError("Invalid value for `erc20_transfers`, must not be `None`")  # noqa: E501

        self._erc20_transfers = erc20_transfers

    @property
    def erc20_approvals(self):
        """Gets the erc20_approvals of this WebhookTypesIWebhook.  # noqa: E501


        :return: The erc20_approvals of this WebhookTypesIWebhook.  # noqa: E501
        :rtype: list[IERC20Approval]
        """
        return self._erc20_approvals

    @erc20_approvals.setter
    def erc20_approvals(self, erc20_approvals):
        """Sets the erc20_approvals of this WebhookTypesIWebhook.


        :param erc20_approvals: The erc20_approvals of this WebhookTypesIWebhook.  # noqa: E501
        :type: list[IERC20Approval]
        """
        if erc20_approvals is None:
            raise ValueError("Invalid value for `erc20_approvals`, must not be `None`")  # noqa: E501

        self._erc20_approvals = erc20_approvals

    @property
    def nft_transfers(self):
        """Gets the nft_transfers of this WebhookTypesIWebhook.  # noqa: E501


        :return: The nft_transfers of this WebhookTypesIWebhook.  # noqa: E501
        :rtype: list[INFTTransfer]
        """
        return self._nft_transfers

    @nft_transfers.setter
    def nft_transfers(self, nft_transfers):
        """Sets the nft_transfers of this WebhookTypesIWebhook.


        :param nft_transfers: The nft_transfers of this WebhookTypesIWebhook.  # noqa: E501
        :type: list[INFTTransfer]
        """
        if nft_transfers is None:
            raise ValueError("Invalid value for `nft_transfers`, must not be `None`")  # noqa: E501

        self._nft_transfers = nft_transfers

    @property
    def nft_approvals(self):
        """Gets the nft_approvals of this WebhookTypesIWebhook.  # noqa: E501


        :return: The nft_approvals of this WebhookTypesIWebhook.  # noqa: E501
        :rtype: INFTApproval
        """
        return self._nft_approvals

    @nft_approvals.setter
    def nft_approvals(self, nft_approvals):
        """Sets the nft_approvals of this WebhookTypesIWebhook.


        :param nft_approvals: The nft_approvals of this WebhookTypesIWebhook.  # noqa: E501
        :type: INFTApproval
        """
        if nft_approvals is None:
            raise ValueError("Invalid value for `nft_approvals`, must not be `None`")  # noqa: E501

        self._nft_approvals = nft_approvals

    @property
    def block(self):
        """Gets the block of this WebhookTypesIWebhook.  # noqa: E501


        :return: The block of this WebhookTypesIWebhook.  # noqa: E501
        :rtype: Block
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this WebhookTypesIWebhook.


        :param block: The block of this WebhookTypesIWebhook.  # noqa: E501
        :type: Block
        """
        if block is None:
            raise ValueError("Invalid value for `block`, must not be `None`")  # noqa: E501

        self._block = block

    @property
    def chain_id(self):
        """Gets the chain_id of this WebhookTypesIWebhook.  # noqa: E501


        :return: The chain_id of this WebhookTypesIWebhook.  # noqa: E501
        :rtype: str
        """
        return self._chain_id

    @chain_id.setter
    def chain_id(self, chain_id):
        """Sets the chain_id of this WebhookTypesIWebhook.


        :param chain_id: The chain_id of this WebhookTypesIWebhook.  # noqa: E501
        :type: str
        """
        if chain_id is None:
            raise ValueError("Invalid value for `chain_id`, must not be `None`")  # noqa: E501

        self._chain_id = chain_id

    @property
    def logs(self):
        """Gets the logs of this WebhookTypesIWebhook.  # noqa: E501


        :return: The logs of this WebhookTypesIWebhook.  # noqa: E501
        :rtype: list[Log]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this WebhookTypesIWebhook.


        :param logs: The logs of this WebhookTypesIWebhook.  # noqa: E501
        :type: list[Log]
        """
        if logs is None:
            raise ValueError("Invalid value for `logs`, must not be `None`")  # noqa: E501

        self._logs = logs

    @property
    def txs(self):
        """Gets the txs of this WebhookTypesIWebhook.  # noqa: E501


        :return: The txs of this WebhookTypesIWebhook.  # noqa: E501
        :rtype: list[Transaction]
        """
        return self._txs

    @txs.setter
    def txs(self, txs):
        """Sets the txs of this WebhookTypesIWebhook.


        :param txs: The txs of this WebhookTypesIWebhook.  # noqa: E501
        :type: list[Transaction]
        """
        if txs is None:
            raise ValueError("Invalid value for `txs`, must not be `None`")  # noqa: E501

        self._txs = txs

    @property
    def txs_internal(self):
        """Gets the txs_internal of this WebhookTypesIWebhook.  # noqa: E501


        :return: The txs_internal of this WebhookTypesIWebhook.  # noqa: E501
        :rtype: list[InternalTransaction]
        """
        return self._txs_internal

    @txs_internal.setter
    def txs_internal(self, txs_internal):
        """Sets the txs_internal of this WebhookTypesIWebhook.


        :param txs_internal: The txs_internal of this WebhookTypesIWebhook.  # noqa: E501
        :type: list[InternalTransaction]
        """
        if txs_internal is None:
            raise ValueError("Invalid value for `txs_internal`, must not be `None`")  # noqa: E501

        self._txs_internal = txs_internal

    @property
    def abis(self):
        """Gets the abis of this WebhookTypesIWebhook.  # noqa: E501


        :return: The abis of this WebhookTypesIWebhook.  # noqa: E501
        :rtype: IAbi
        """
        return self._abis

    @abis.setter
    def abis(self, abis):
        """Sets the abis of this WebhookTypesIWebhook.


        :param abis: The abis of this WebhookTypesIWebhook.  # noqa: E501
        :type: IAbi
        """
        if abis is None:
            raise ValueError("Invalid value for `abis`, must not be `None`")  # noqa: E501

        self._abis = abis

    @property
    def retries(self):
        """Gets the retries of this WebhookTypesIWebhook.  # noqa: E501


        :return: The retries of this WebhookTypesIWebhook.  # noqa: E501
        :rtype: float
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """Sets the retries of this WebhookTypesIWebhook.


        :param retries: The retries of this WebhookTypesIWebhook.  # noqa: E501
        :type: float
        """
        if retries is None:
            raise ValueError("Invalid value for `retries`, must not be `None`")  # noqa: E501

        self._retries = retries

    @property
    def confirmed(self):
        """Gets the confirmed of this WebhookTypesIWebhook.  # noqa: E501


        :return: The confirmed of this WebhookTypesIWebhook.  # noqa: E501
        :rtype: bool
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this WebhookTypesIWebhook.


        :param confirmed: The confirmed of this WebhookTypesIWebhook.  # noqa: E501
        :type: bool
        """
        if confirmed is None:
            raise ValueError("Invalid value for `confirmed`, must not be `None`")  # noqa: E501

        self._confirmed = confirmed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookTypesIWebhook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookTypesIWebhook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
