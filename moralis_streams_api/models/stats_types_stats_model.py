# coding: utf-8

"""
    Streams Api

    API that provides access to Moralis Streams  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatsTypesStatsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_webhooks_delivered': 'float',
        'total_webhooks_failed': 'float',
        'total_logs_processed': 'float',
        'total_txs_processed': 'float',
        'total_txs_internal_processed': 'float'
    }

    attribute_map = {
        'total_webhooks_delivered': 'totalWebhooksDelivered',
        'total_webhooks_failed': 'totalWebhooksFailed',
        'total_logs_processed': 'totalLogsProcessed',
        'total_txs_processed': 'totalTxsProcessed',
        'total_txs_internal_processed': 'totalTxsInternalProcessed'
    }

    def __init__(self, total_webhooks_delivered=None, total_webhooks_failed=None, total_logs_processed=None, total_txs_processed=None, total_txs_internal_processed=None):  # noqa: E501
        """StatsTypesStatsModel - a model defined in Swagger"""  # noqa: E501
        self._total_webhooks_delivered = None
        self._total_webhooks_failed = None
        self._total_logs_processed = None
        self._total_txs_processed = None
        self._total_txs_internal_processed = None
        self.discriminator = None
        self.total_webhooks_delivered = total_webhooks_delivered
        self.total_webhooks_failed = total_webhooks_failed
        self.total_logs_processed = total_logs_processed
        self.total_txs_processed = total_txs_processed
        self.total_txs_internal_processed = total_txs_internal_processed

    @property
    def total_webhooks_delivered(self):
        """Gets the total_webhooks_delivered of this StatsTypesStatsModel.  # noqa: E501

        The total amount of webhooks delivered across all streams  # noqa: E501

        :return: The total_webhooks_delivered of this StatsTypesStatsModel.  # noqa: E501
        :rtype: float
        """
        return self._total_webhooks_delivered

    @total_webhooks_delivered.setter
    def total_webhooks_delivered(self, total_webhooks_delivered):
        """Sets the total_webhooks_delivered of this StatsTypesStatsModel.

        The total amount of webhooks delivered across all streams  # noqa: E501

        :param total_webhooks_delivered: The total_webhooks_delivered of this StatsTypesStatsModel.  # noqa: E501
        :type: float
        """
        if total_webhooks_delivered is None:
            raise ValueError("Invalid value for `total_webhooks_delivered`, must not be `None`")  # noqa: E501

        self._total_webhooks_delivered = total_webhooks_delivered

    @property
    def total_webhooks_failed(self):
        """Gets the total_webhooks_failed of this StatsTypesStatsModel.  # noqa: E501

        The total amount of failed webhooks across all streams  # noqa: E501

        :return: The total_webhooks_failed of this StatsTypesStatsModel.  # noqa: E501
        :rtype: float
        """
        return self._total_webhooks_failed

    @total_webhooks_failed.setter
    def total_webhooks_failed(self, total_webhooks_failed):
        """Sets the total_webhooks_failed of this StatsTypesStatsModel.

        The total amount of failed webhooks across all streams  # noqa: E501

        :param total_webhooks_failed: The total_webhooks_failed of this StatsTypesStatsModel.  # noqa: E501
        :type: float
        """
        if total_webhooks_failed is None:
            raise ValueError("Invalid value for `total_webhooks_failed`, must not be `None`")  # noqa: E501

        self._total_webhooks_failed = total_webhooks_failed

    @property
    def total_logs_processed(self):
        """Gets the total_logs_processed of this StatsTypesStatsModel.  # noqa: E501

        The total amount of logs processed across all streams, this includes failed webhooks  # noqa: E501

        :return: The total_logs_processed of this StatsTypesStatsModel.  # noqa: E501
        :rtype: float
        """
        return self._total_logs_processed

    @total_logs_processed.setter
    def total_logs_processed(self, total_logs_processed):
        """Sets the total_logs_processed of this StatsTypesStatsModel.

        The total amount of logs processed across all streams, this includes failed webhooks  # noqa: E501

        :param total_logs_processed: The total_logs_processed of this StatsTypesStatsModel.  # noqa: E501
        :type: float
        """
        if total_logs_processed is None:
            raise ValueError("Invalid value for `total_logs_processed`, must not be `None`")  # noqa: E501

        self._total_logs_processed = total_logs_processed

    @property
    def total_txs_processed(self):
        """Gets the total_txs_processed of this StatsTypesStatsModel.  # noqa: E501

        The total amount of txs processed across all streams, this includes failed webhooks  # noqa: E501

        :return: The total_txs_processed of this StatsTypesStatsModel.  # noqa: E501
        :rtype: float
        """
        return self._total_txs_processed

    @total_txs_processed.setter
    def total_txs_processed(self, total_txs_processed):
        """Sets the total_txs_processed of this StatsTypesStatsModel.

        The total amount of txs processed across all streams, this includes failed webhooks  # noqa: E501

        :param total_txs_processed: The total_txs_processed of this StatsTypesStatsModel.  # noqa: E501
        :type: float
        """
        if total_txs_processed is None:
            raise ValueError("Invalid value for `total_txs_processed`, must not be `None`")  # noqa: E501

        self._total_txs_processed = total_txs_processed

    @property
    def total_txs_internal_processed(self):
        """Gets the total_txs_internal_processed of this StatsTypesStatsModel.  # noqa: E501

        The total amount of internal txs processed across all streams, this includes failed webhooks  # noqa: E501

        :return: The total_txs_internal_processed of this StatsTypesStatsModel.  # noqa: E501
        :rtype: float
        """
        return self._total_txs_internal_processed

    @total_txs_internal_processed.setter
    def total_txs_internal_processed(self, total_txs_internal_processed):
        """Sets the total_txs_internal_processed of this StatsTypesStatsModel.

        The total amount of internal txs processed across all streams, this includes failed webhooks  # noqa: E501

        :param total_txs_internal_processed: The total_txs_internal_processed of this StatsTypesStatsModel.  # noqa: E501
        :type: float
        """
        if total_txs_internal_processed is None:
            raise ValueError("Invalid value for `total_txs_internal_processed`, must not be `None`")  # noqa: E501

        self._total_txs_internal_processed = total_txs_internal_processed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatsTypesStatsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatsTypesStatsModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
